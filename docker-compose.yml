# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: fileserver-db
    environment:
      POSTGRES_DB: fileserver
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - fileserver-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fileserver"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: fileserver-api
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_NAME: fileserver
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_PORT: 5432
      SERVER_PORT: 8000
      SECRET: your-super-secret-jwt-key-change-this-in-production
      UPLOAD_DIR: ./uploads
      AWS_REGION: eu-central-1
    volumes:
      - uploads_data:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - fileserver-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: fileserver-web
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - fileserver-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  fileserver-network:
    driver: bridge